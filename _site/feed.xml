<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Charlie Gerard</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://charliegerard.github.io/blog/feed.xml" />
<link rel="alternate" type="text/html" href="http://charliegerard.github.io/blog" />
<updated>2015-09-17T16:35:43+10:00</updated>
<id>http://charliegerard.github.io/blog/</id>
<author>
  <name>Charlie Gerard</name>
  <uri>http://charliegerard.github.io/blog/</uri>
  <email>charlie.a.gerard@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Controlling the Parrot AR Drone with the Myo Armband in Node.js]]></title>
  <link rel="alternate" type="text/html" href="http://charliegerard.github.io/blog/Control-Drone-Myo-Node/" />
  <id>http://charliegerard.github.io/blog/Control-Drone-Myo-Node</id>
  <published>2015-09-17T00:00:00+10:00</published>
  <updated>2015-09-17T00:00:00+10:00</updated>
  <author>
    <name></name>
    <uri>http://charliegerard.github.io/blog</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/02/myo-drone-node.png&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-136&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/02/myo-drone-node.png&quot; alt=&quot;myo-drone-nodjs-tutorial&quot; width=&quot;660&quot; height=&quot;152&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following the last tutorial I wrote on how to control the &lt;a href=&quot;http://www.gosphero.com/&quot; target=&quot;_blank&quot;&gt;Sphero&lt;/a&gt; with the &lt;a href=&quot;https://www.thalmic.com/en/myo/&quot; target=&quot;_blank&quot;&gt;Myo armband&lt;/a&gt;, here is another one on how to control the &lt;a href=&quot;http://ardrone2.parrot.com/&quot; target=&quot;_blank&quot;&gt;Parrot AR Drone&lt;/a&gt; with the Myo using Node.js.&lt;/p&gt;

&lt;p&gt;If you want to follow along, you can find the &lt;a title=&quot;Myo Drone&quot; href=&quot;https://github.com/charliegerard/myo_drone&quot; target=&quot;_blank&quot;&gt;repo on my github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To begin with, we need to setup the server configuration. After requiring the necessary modules, here is what we need to write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  var env = process.env.NODE_ENV || &#39;development&#39;;
if(&#39;development&#39; == env){
  app.set(&#39;port&#39;, process.env.PORT || 3000);
  app.use(express.static(__dirname + &#39;/public&#39;));
  app.use(&quot;/node_modules&quot;, express.static(path.join(__dirname, &#39;node_modules&#39;)))
}

server = require(&#39;http&#39;).createServer(app);

var bayeux = new faye.NodeAdapter({
    mount: &#39;/faye&#39;,
    timeout: 50
  });

  bayeux.attach(server);

  client = new faye.Client(&quot;http://localhost:&quot; + (app.get(&quot;port&quot;)) + &quot;/faye&quot;, {});

  client.subscribe(&quot;/drone/move&quot;, function (d) {
    console.log(d);
    console.log(&quot;drone move?&quot;)
    return drone[d.action](d.speed);
  });

  client.subscribe(&quot;/drone/drone&quot;, function (d) {
    console.log(d);
    console.log(&quot;drone stuff&quot;)
      return drone[d.action]();
  });

  server.listen(app.get(&#39;port&#39;), function () {
    console.log(&quot;Express server listening on port &quot; + app.get(&quot;port&quot;));
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use express to set up the server and Faye &amp;amp; Bayeux for the communications between the Drone and your app.&lt;/p&gt;

&lt;p&gt;We also use the module ‘dronestream’ to be able to stream video from the drone to the browser that is listening on port 3001.&lt;/p&gt;

&lt;p&gt;The rest of the code deals with the commands sent from the Myo to the drone. First of all, we need to create an instance of the Myo and then define some commands.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
  myo = Myo.create();

myo.unlock();

myo.on(&#39;fingers_spread&#39;, function(){
    takeoff();
});

myo.on(&#39;wave_in&#39;, function(){
    goLeft();
})

var takeoff = function () {
    flying = true;
    return faye.publish(&quot;/drone/drone&quot;, {
      action: &#39;takeoff&#39;
    });
};

var goLeft = function(){
    stopped = false;
    setTimeout(function (){
      return faye.publish(&quot;/drone/move&quot;, {
        action: &#39;left&#39;
        // speed: adjustXspeed
      })
    }, timeout);
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the instance of the Myo is created, it can detect certain types of movements and run functions accordingly.&lt;/p&gt;

&lt;p&gt;The ‘myo.unlock()’ command should allow the Myo to be unlocked while you use the app. However, I noticed I still needed to execute the unlock gesture ‘double tap’ between each command… Then the ‘faye.publish’ allows to send the commands and make the drone move. You can adjust the action and speed as you like.&lt;/p&gt;

&lt;p&gt;This is just a snippet so once again, if you wanna have a look at the rest of the code or if you want to play around with it, everything is available on my &lt;a title=&quot;Github repository for Myo Drone&quot; href=&quot;https://github.com/charliegerard/myo_drone&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;Hope it helps and enjoy!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://charliegerard.github.io/blog/Control-Drone-Myo-Node/&quot;&gt;Controlling the Parrot AR Drone with the Myo Armband in Node.js&lt;/a&gt; was originally published by Charlie Gerard at &lt;a href=&quot;http://charliegerard.github.io/blog&quot;&gt;Charlie Gerard&lt;/a&gt; on September 17, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Controlling the Parrot AR Drone with the Leap Motion in Cylon.js]]></title>
  <link rel="alternate" type="text/html" href="http://charliegerard.github.io/blog/Control-Drone-Leap-Motion-Cylon/" />
  <id>http://charliegerard.github.io/blog/Control-Drone-Leap-Motion-Cylon</id>
  <published>2015-09-16T00:00:00+10:00</published>
  <updated>2015-09-16T00:00:00+10:00</updated>
  <author>
    <name></name>
    <uri>http://charliegerard.github.io/blog</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/cylonjs-drone-leapmotion.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-85&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/cylonjs-drone-leapmotion.png?w=660&quot; alt=&quot;cylon-drone-leapmotion&quot; width=&quot;660&quot; height=&quot;152&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following my tutorial on &lt;a href=&quot;https://charliegerard.wordpress.com/2015/01/12/sphero-leap-motion-cylon-js/&quot; target=&quot;_blank&quot;&gt;controlling the Sphero using the Leap Motion&lt;/a&gt;, I thought I would keep on converting my Node.js projects to Cylon.js and work on controlling the Drone with the Leap Motion.&lt;/p&gt;

&lt;p&gt;If you’ve had a look at my last tutorial, you probably noticed that using Cylon.js makes it really easy to program for hardware and connect multiple devices together.&lt;/p&gt;

&lt;p&gt;Below is the usual setup of any Cylon project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var Cylon = require(&#39;cylon&#39;);

Cylon.robot({
  connections:{
    leapmotion: {adaptor: &#39;leapmotion&#39;},
    ardrone: {adaptor: &#39;ardrone&#39;, port: &#39;192.168.1.1&#39;}
  },

  devices: {
    leapmotion: {driver: &#39;leapmotion&#39;, connection: &#39;leapmotion&#39;},
    drone: {driver: &#39;ardrone&#39;, connection: &#39;ardrone&#39;}
  },
 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, you simply need to specify which devices you are using, the more interesting bit comes in the rest of the code…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;work: function(my){
   my.leapmotion.on(&#39;hand&#39;, function(hand){
     my.drone.takeoff();
     after((5).seconds(), function(){
       my.drone.land();
     })
   })
 }
}).start();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code only makes the Drone take off when the Leap Motion senses a hand over it and land after 5 seconds (just in case it decides to go crazy…).&lt;/p&gt;

&lt;p&gt;Then, if you want to make it do more interesting things, you will have to play around with what the Leap Motion has to offer; different types of gestures, distance, hands, fingers, etc… The Drone actions themselves are pretty straightforward:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;my.drone.up();&lt;/li&gt;
  &lt;li&gt;my.drone.down();&lt;/li&gt;
  &lt;li&gt;my.drone.forward();&lt;/li&gt;
  &lt;li&gt;my.drone.back();&lt;/li&gt;
  &lt;li&gt;my.drone.left();&lt;/li&gt;
  &lt;li&gt;my.drone.right();&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also make the drone rotate clockwise or counterclockwise but what I found the most awesome thing is that the cylon-ardrone module makes the ‘flip’ movement really easy to execute. On a ‘keyTap’ for example, your drone could do a backflip!!&lt;/p&gt;

&lt;p&gt;The code for that would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; work: function(my){
   my.leapmotion.on(&#39;gesture&#39;, function(gesture){
     if(gesture){
       my.drone.takeoff();
       if(gesture.type === &#39;keyTap&#39;){
         my.drone.backFlip();
         after((6).seconds(), function(){
          my.drone.land();
         }
       }
     } else {
       my.drone.stop();
     };
   };
 }
}).start();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanna see the difference with Node.js, you can find my original Github repo &lt;a href=&quot;https://github.com/charliegerard/leap_drone&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, otherwise &lt;a href=&quot;https://github.com/charliegerard/cylon-projects/tree/master/cylon-drone-leapmotion&quot; target=&quot;_blank&quot;&gt;here is the repo&lt;/a&gt; with more commands!&lt;/p&gt;

&lt;p&gt;If you have any question, don’t hesitate!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://charliegerard.github.io/blog/Control-Drone-Leap-Motion-Cylon/&quot;&gt;Controlling the Parrot AR Drone with the Leap Motion in Cylon.js&lt;/a&gt; was originally published by Charlie Gerard at &lt;a href=&quot;http://charliegerard.github.io/blog&quot;&gt;Charlie Gerard&lt;/a&gt; on September 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Controlling the Sphero using the Leap Motion in Cylon.js]]></title>
  <link rel="alternate" type="text/html" href="http://charliegerard.github.io/blog/Control-Sphero-Leap-Motion-Cylon/" />
  <id>http://charliegerard.github.io/blog/Control-Sphero-Leap-Motion-Cylon</id>
  <published>2015-09-15T00:00:00+10:00</published>
  <updated>2015-09-15T00:00:00+10:00</updated>
  <author>
    <name></name>
    <uri>http://charliegerard.github.io/blog</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/cylonjs-sphero.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-61&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/cylonjs-sphero.png?w=660&quot; alt=&quot;cylonjs-sphero-leap-motion&quot; width=&quot;660&quot; height=&quot;152&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my personal time, I love to play around with hardware and robots.&lt;/p&gt;

&lt;p&gt;I started in Node.js but recently I discovered Cylon.js and after a quick play around with it, I found it pretty awesome and decided to rewrite my projects using this framework.&lt;/p&gt;

&lt;p&gt;As a starting point, I decided to rewrite the project to control the &lt;a href=&quot;http://www.gosphero.com/&quot; target=&quot;_blank&quot;&gt;Sphero&lt;/a&gt; with the &lt;a href=&quot;https://www.leapmotion.com/&quot; target=&quot;_blank&quot;&gt;Leap Motion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the original repo &lt;a href=&quot;http://charliegerard.github.io/leap_sphero&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, but here are a few code snippets:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-02-47-pm.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-62 size-large&quot; style=&quot;border:1px solid #000000;&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-02-47-pm.png?w=660&quot; alt=&quot;Screen Shot 2015-01-10 at 3.02.47 pm&quot; width=&quot;660&quot; height=&quot;348&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-04-09-pm.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-63 size-large&quot; style=&quot;border:1px solid #000000;&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-04-09-pm.png?w=660&quot; alt=&quot;Screen Shot 2015-01-10 at 3.04.09 pm&quot; width=&quot;660&quot; height=&quot;419&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way it works is pretty straight forward. The Sphero connects via bluetooth and the Leap Motion needs to be plugged in your computer. Once the Sphero is detected, the hand is tracked by the Leap Motion and the direction will be applied to the Sphero.&lt;/p&gt;

&lt;p&gt;Feel free to have a better look at the code on &lt;a href=&quot;http://charliegerard.github.io/leap_sphero&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s move on to &lt;strong&gt;Cylon.js&lt;/strong&gt;. The first thing I noticed about this framework is the short amount of code necessary to get to the same result. I managed to do pretty much the exact same thing in 68 lines of code!&lt;/p&gt;

&lt;p&gt;I guess what makes it easier is that Cylon already has some modules you can install to program for certain devices, like the ones below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-11-at-8-59-14-pm.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-69&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-11-at-8-59-14-pm.png?w=660&quot; alt=&quot;cylon-devices&quot; width=&quot;660&quot; height=&quot;487&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start using Cylon, you need to require it and specify which devices you are working with.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var Cylon = require(&#39;cylon&#39;);

Cylon.robot({
  connections: {
    leapmotion: {adaptor: &#39;leapmotion&#39;},
    sphero: {adaptor: &#39;sphero&#39;, port: &#39;/dev/rfcomm0&#39;}
  },

  devices: {
    leapmotion: {driver: &#39;leapmotion&#39;, connection: &#39;leapmotion&#39;},
    sphero: {driver: &#39;sphero&#39;, connection: &#39;sphero&#39;}
  },

  work: function(f){
  }
}).start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the moment, this code is not really doing anything but you can see how to specify which devices you are going to use.&lt;/p&gt;

&lt;p&gt;You have to specify a port for the Sphero because it connects to your computer via Bluetooth. To find the port for your own Sphero, run ‘ls /dev/tty.Sphero*’ in your console and replace the port in this code with the result you get.&lt;/p&gt;

&lt;p&gt;The rest of the code goes inside the ‘work’ function as below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
work: function(my){
  my.leapmotion.on(&#39;frame&#39;, function(frame){
   if(frame.valid &amp;amp;&amp;amp; frame.gestures.length &amp;gt; 0{
     my.sphero.roll(70,0,1);
   }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above makes the Sphero go forward if the Leap Motion detects any kind of gesture.&lt;/p&gt;

&lt;p&gt;For the full code, have a look at &lt;a href=&quot;https://github.com/charliegerard/cylon-projects/tree/master/cylon-leapmotion-sphero&quot; target=&quot;_blank&quot;&gt;my github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll probably write another tutorial soon once I have a chance to rewrite another project but in the meantime let me know if you have any question!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://charliegerard.github.io/blog/Control-Sphero-Leap-Motion-Cylon/&quot;&gt;Controlling the Sphero using the Leap Motion in Cylon.js&lt;/a&gt; was originally published by Charlie Gerard at &lt;a href=&quot;http://charliegerard.github.io/blog&quot;&gt;Charlie Gerard&lt;/a&gt; on September 15, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Controlling the Sphero using the Leap Motion]]></title>
  <link rel="alternate" type="text/html" href="http://charliegerard.github.io/blog/Controlling-Sphero-Leap-Motion/" />
  <id>http://charliegerard.github.io/blog/Controlling-Sphero-Leap-Motion</id>
  <published>2015-08-20T00:00:00+10:00</published>
  <updated>2015-08-20T00:00:00+10:00</updated>
  <author>
    <name></name>
    <uri>http://charliegerard.github.io/blog</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/cylonjs-sphero.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-61&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/cylonjs-sphero.png?w=660&quot; alt=&quot;cylonjs-sphero-leap-motion&quot; width=&quot;660&quot; height=&quot;152&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my personal time, I love to play around with hardware and robots.&lt;/p&gt;

&lt;p&gt;I started in Node.js but recently I discovered Cylon.js and after a quick play around with it, I found it pretty awesome and decided to rewrite my projects using this framework.&lt;/p&gt;

&lt;p&gt;As a starting point, I decided to rewrite the project to control the &lt;a href=&quot;http://www.gosphero.com/&quot;&gt;Sphero&lt;/a&gt; with the &lt;a href=&quot;https://www.leapmotion.com/&quot;&gt;Leap Motion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the original repo &lt;a href=&quot;http://charliegerard.github.io/leap_sphero&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, but here are a few code snippets:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-02-47-pm.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-62 size-large&quot; style=&quot;border: 1px solid #000000;&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-02-47-pm.png?w=660&quot; alt=&quot;Screen Shot 2015-01-10 at 3.02.47 pm&quot; width=&quot;660&quot; height=&quot;348&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-04-09-pm.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-63 size-large&quot; style=&quot;border: 1px solid #000000;&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-10-at-3-04-09-pm.png?w=660&quot; alt=&quot;Screen Shot 2015-01-10 at 3.04.09 pm&quot; width=&quot;660&quot; height=&quot;419&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way it works is pretty straight forward. The Sphero connects via bluetooth and the Leap Motion needs to be plugged in your computer. Once the Sphero is detected, the hand is tracked by the Leap Motion and the direction will be applied to the Sphero.&lt;/p&gt;

&lt;p&gt;Feel free to have a better look at the code on &lt;a href=&quot;http://charliegerard.github.io/leap_sphero&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s move on to &lt;strong&gt;Cylon.js&lt;/strong&gt;. The first thing I noticed about this framework is the short amount of code necessary to get to the same result. I managed to do pretty much the exact same thing in 68 lines of code!&lt;/p&gt;

&lt;p&gt;I guess what makes it easier is that Cylon already has some modules you can install to program for certain devices, like the ones below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-11-at-8-59-14-pm.png&quot;&gt;&lt;img class=&quot;aligncenter size-large wp-image-69&quot; src=&quot;https://charliegerard.files.wordpress.com/2015/01/screen-shot-2015-01-11-at-8-59-14-pm.png?w=660&quot; alt=&quot;cylon-devices&quot; width=&quot;660&quot; height=&quot;487&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start using Cylon, you need to require it and specify which devices you are working with.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;code&quot;&gt;
var Cylon = require(&#39;cylon&#39;);

Cylon.robot({
  connections: {
    leapmotion: {adaptor: &#39;leapmotion&#39;},
    sphero: {adaptor: &#39;sphero&#39;, port: &#39;/dev/rfcomm0&#39;}
  },

  devices: {
    leapmotion: {driver: &#39;leapmotion&#39;, connection: &#39;leapmotion&#39;},
    sphero: {driver: &#39;sphero&#39;, connection: &#39;sphero&#39;}
  },

  work: function(f){
  }
}).start();

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the moment, this code is not really doing anything but you can see how to specify which devices you are going to use.&lt;/p&gt;

&lt;p&gt;You have to specify a port for the Sphero because it connects to your computer via Bluetooth. To find the port for your own Sphero, run ‘ls /dev/tty.Sphero*’ in your console and replace the port in this code with the result you get.&lt;/p&gt;

&lt;p&gt;The rest of the code goes inside the ‘work’ function as below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;code&quot;&gt;
work: function(my){
  my.leapmotion.on(&#39;frame&#39;, function(frame){
   if(frame.valid &amp;amp;&amp;amp; frame.gestures.length &amp;gt; 0{
     my.sphero.roll(70,0,1);
   }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above makes the Sphero go forward if the Leap Motion detects any kind of gesture.&lt;/p&gt;

&lt;p&gt;For the full code, have a look at &lt;a href=&quot;https://github.com/charliegerard/cylon-projects/tree/master/cylon-leapmotion-sphero&quot; target=&quot;_blank&quot;&gt;my github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll probably write another tutorial soon once I have a chance to rewrite another project but in the meantime let me know if you have any question!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://charliegerard.github.io/blog/Controlling-Sphero-Leap-Motion/&quot;&gt;Controlling the Sphero using the Leap Motion&lt;/a&gt; was originally published by Charlie Gerard at &lt;a href=&quot;http://charliegerard.github.io/blog&quot;&gt;Charlie Gerard&lt;/a&gt; on August 20, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Setting up new blog]]></title>
  <link rel="alternate" type="text/html" href="http://charliegerard.github.io/blog/Hello-World/" />
  <id>http://charliegerard.github.io/blog/Hello-World</id>
  <published>2014-03-03T00:00:00+11:00</published>
  <updated>2014-03-03T00:00:00+11:00</updated>
  <author>
    <name>Charlie Gerard</name>
    <uri>http://charliegerard.github.io/blog</uri>
    <email>charlie.a.gerard@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Recently decided to migrate my blog from Wordpress to Github pages using Jekyll.
I’m not sure when it will be finished but hopefully soon!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://charliegerard.github.io/blog/Hello-World/&quot;&gt;Setting up new blog&lt;/a&gt; was originally published by Charlie Gerard at &lt;a href=&quot;http://charliegerard.github.io/blog&quot;&gt;Charlie Gerard&lt;/a&gt; on March 03, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>
